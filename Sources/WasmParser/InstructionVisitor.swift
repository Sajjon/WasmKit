// This file is generated by Utilities/generate_inst_visitor.swift
public enum Instruction: Equatable {
    case `unreachable`
    case `nop`
    case `block`(blockType: BlockType)
    case `loop`(blockType: BlockType)
    case `if`(blockType: BlockType)
    case `else`
    case `end`
    case `br`(relativeDepth: UInt32)
    case `brIf`(relativeDepth: UInt32)
    case `brTable`(targets: BrTable)
    case `return`
    case `call`(functionIndex: UInt32)
    case `callIndirect`(typeIndex: UInt32, tableIndex: UInt32)
    case `drop`
    case `select`
    case `typedSelect`(type: ValueType)
    case `localGet`(localIndex: UInt32)
    case `localSet`(localIndex: UInt32)
    case `localTee`(localIndex: UInt32)
    case `globalGet`(globalIndex: UInt32)
    case `globalSet`(globalIndex: UInt32)
    case `i32Load`(memarg: MemArg)
    case `i64Load`(memarg: MemArg)
    case `f32Load`(memarg: MemArg)
    case `f64Load`(memarg: MemArg)
    case `i32Load8S`(memarg: MemArg)
    case `i32Load8U`(memarg: MemArg)
    case `i32Load16S`(memarg: MemArg)
    case `i32Load16U`(memarg: MemArg)
    case `i64Load8S`(memarg: MemArg)
    case `i64Load8U`(memarg: MemArg)
    case `i64Load16S`(memarg: MemArg)
    case `i64Load16U`(memarg: MemArg)
    case `i64Load32S`(memarg: MemArg)
    case `i64Load32U`(memarg: MemArg)
    case `i32Store`(memarg: MemArg)
    case `i64Store`(memarg: MemArg)
    case `f32Store`(memarg: MemArg)
    case `f64Store`(memarg: MemArg)
    case `i32Store8`(memarg: MemArg)
    case `i32Store16`(memarg: MemArg)
    case `i64Store8`(memarg: MemArg)
    case `i64Store16`(memarg: MemArg)
    case `i64Store32`(memarg: MemArg)
    case `memorySize`(memory: UInt32)
    case `memoryGrow`(memory: UInt32)
    case `i32Const`(value: Int32)
    case `i64Const`(value: Int64)
    case `f32Const`(value: IEEE754.Float32)
    case `f64Const`(value: IEEE754.Float64)
    case `refNull`(type: ReferenceType)
    case `refIsNull`
    case `refFunc`(functionIndex: UInt32)
    case `i32Eqz`
    case `i32Eq`
    case `i32Ne`
    case `i32LtS`
    case `i32LtU`
    case `i32GtS`
    case `i32GtU`
    case `i32LeS`
    case `i32LeU`
    case `i32GeS`
    case `i32GeU`
    case `i64Eqz`
    case `i64Eq`
    case `i64Ne`
    case `i64LtS`
    case `i64LtU`
    case `i64GtS`
    case `i64GtU`
    case `i64LeS`
    case `i64LeU`
    case `i64GeS`
    case `i64GeU`
    case `f32Eq`
    case `f32Ne`
    case `f32Lt`
    case `f32Gt`
    case `f32Le`
    case `f32Ge`
    case `f64Eq`
    case `f64Ne`
    case `f64Lt`
    case `f64Gt`
    case `f64Le`
    case `f64Ge`
    case `i32Clz`
    case `i32Ctz`
    case `i32Popcnt`
    case `i32Add`
    case `i32Sub`
    case `i32Mul`
    case `i32DivS`
    case `i32DivU`
    case `i32RemS`
    case `i32RemU`
    case `i32And`
    case `i32Or`
    case `i32Xor`
    case `i32Shl`
    case `i32ShrS`
    case `i32ShrU`
    case `i32Rotl`
    case `i32Rotr`
    case `i64Clz`
    case `i64Ctz`
    case `i64Popcnt`
    case `i64Add`
    case `i64Sub`
    case `i64Mul`
    case `i64DivS`
    case `i64DivU`
    case `i64RemS`
    case `i64RemU`
    case `i64And`
    case `i64Or`
    case `i64Xor`
    case `i64Shl`
    case `i64ShrS`
    case `i64ShrU`
    case `i64Rotl`
    case `i64Rotr`
    case `f32Abs`
    case `f32Neg`
    case `f32Ceil`
    case `f32Floor`
    case `f32Trunc`
    case `f32Nearest`
    case `f32Sqrt`
    case `f32Add`
    case `f32Sub`
    case `f32Mul`
    case `f32Div`
    case `f32Min`
    case `f32Max`
    case `f32Copysign`
    case `f64Abs`
    case `f64Neg`
    case `f64Ceil`
    case `f64Floor`
    case `f64Trunc`
    case `f64Nearest`
    case `f64Sqrt`
    case `f64Add`
    case `f64Sub`
    case `f64Mul`
    case `f64Div`
    case `f64Min`
    case `f64Max`
    case `f64Copysign`
    case `i32WrapI64`
    case `i32TruncF32S`
    case `i32TruncF32U`
    case `i32TruncF64S`
    case `i32TruncF64U`
    case `i64ExtendI32S`
    case `i64ExtendI32U`
    case `i64TruncF32S`
    case `i64TruncF32U`
    case `i64TruncF64S`
    case `i64TruncF64U`
    case `f32ConvertI32S`
    case `f32ConvertI32U`
    case `f32ConvertI64S`
    case `f32ConvertI64U`
    case `f32DemoteF64`
    case `f64ConvertI32S`
    case `f64ConvertI32U`
    case `f64ConvertI64S`
    case `f64ConvertI64U`
    case `f64PromoteF32`
    case `i32ReinterpretF32`
    case `i64ReinterpretF64`
    case `f32ReinterpretI32`
    case `f64ReinterpretI64`
    case `i32Extend8S`
    case `i32Extend16S`
    case `i64Extend8S`
    case `i64Extend16S`
    case `i64Extend32S`
    case `memoryInit`(dataIndex: UInt32)
    case `dataDrop`(dataIndex: UInt32)
    case `memoryCopy`(dstMem: UInt32, srcMem: UInt32)
    case `memoryFill`(memory: UInt32)
    case `tableInit`(elemIndex: UInt32, table: UInt32)
    case `elemDrop`(elemIndex: UInt32)
    case `tableCopy`(dstTable: UInt32, srcTable: UInt32)
    case `tableFill`(table: UInt32)
    case `tableGet`(table: UInt32)
    case `tableSet`(table: UInt32)
    case `tableGrow`(table: UInt32)
    case `tableSize`(table: UInt32)
    case `i32TruncSatF32S`
    case `i32TruncSatF32U`
    case `i32TruncSatF64S`
    case `i32TruncSatF64U`
    case `i64TruncSatF32S`
    case `i64TruncSatF32U`
    case `i64TruncSatF64S`
    case `i64TruncSatF64U`
}

struct InstructionFactory: InstructionVisitor {
    func visitUnreachable() -> Instruction { return .unreachable }
    func visitNop() -> Instruction { return .nop }
    func visitBlock(blockType: BlockType) -> Instruction { return .block(blockType: blockType) }
    func visitLoop(blockType: BlockType) -> Instruction { return .loop(blockType: blockType) }
    func visitIf(blockType: BlockType) -> Instruction { return .if(blockType: blockType) }
    func visitElse() -> Instruction { return .else }
    func visitEnd() -> Instruction { return .end }
    func visitBr(relativeDepth: UInt32) -> Instruction { return .br(relativeDepth: relativeDepth) }
    func visitBrIf(relativeDepth: UInt32) -> Instruction { return .brIf(relativeDepth: relativeDepth) }
    func visitBrTable(targets: BrTable) -> Instruction { return .brTable(targets: targets) }
    func visitReturn() -> Instruction { return .return }
    func visitCall(functionIndex: UInt32) -> Instruction { return .call(functionIndex: functionIndex) }
    func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) -> Instruction { return .callIndirect(typeIndex: typeIndex, tableIndex: tableIndex) }
    func visitDrop() -> Instruction { return .drop }
    func visitSelect() -> Instruction { return .select }
    func visitTypedSelect(type: ValueType) -> Instruction { return .typedSelect(type: type) }
    func visitLocalGet(localIndex: UInt32) -> Instruction { return .localGet(localIndex: localIndex) }
    func visitLocalSet(localIndex: UInt32) -> Instruction { return .localSet(localIndex: localIndex) }
    func visitLocalTee(localIndex: UInt32) -> Instruction { return .localTee(localIndex: localIndex) }
    func visitGlobalGet(globalIndex: UInt32) -> Instruction { return .globalGet(globalIndex: globalIndex) }
    func visitGlobalSet(globalIndex: UInt32) -> Instruction { return .globalSet(globalIndex: globalIndex) }
    func visitI32Load(memarg: MemArg) -> Instruction { return .i32Load(memarg: memarg) }
    func visitI64Load(memarg: MemArg) -> Instruction { return .i64Load(memarg: memarg) }
    func visitF32Load(memarg: MemArg) -> Instruction { return .f32Load(memarg: memarg) }
    func visitF64Load(memarg: MemArg) -> Instruction { return .f64Load(memarg: memarg) }
    func visitI32Load8S(memarg: MemArg) -> Instruction { return .i32Load8S(memarg: memarg) }
    func visitI32Load8U(memarg: MemArg) -> Instruction { return .i32Load8U(memarg: memarg) }
    func visitI32Load16S(memarg: MemArg) -> Instruction { return .i32Load16S(memarg: memarg) }
    func visitI32Load16U(memarg: MemArg) -> Instruction { return .i32Load16U(memarg: memarg) }
    func visitI64Load8S(memarg: MemArg) -> Instruction { return .i64Load8S(memarg: memarg) }
    func visitI64Load8U(memarg: MemArg) -> Instruction { return .i64Load8U(memarg: memarg) }
    func visitI64Load16S(memarg: MemArg) -> Instruction { return .i64Load16S(memarg: memarg) }
    func visitI64Load16U(memarg: MemArg) -> Instruction { return .i64Load16U(memarg: memarg) }
    func visitI64Load32S(memarg: MemArg) -> Instruction { return .i64Load32S(memarg: memarg) }
    func visitI64Load32U(memarg: MemArg) -> Instruction { return .i64Load32U(memarg: memarg) }
    func visitI32Store(memarg: MemArg) -> Instruction { return .i32Store(memarg: memarg) }
    func visitI64Store(memarg: MemArg) -> Instruction { return .i64Store(memarg: memarg) }
    func visitF32Store(memarg: MemArg) -> Instruction { return .f32Store(memarg: memarg) }
    func visitF64Store(memarg: MemArg) -> Instruction { return .f64Store(memarg: memarg) }
    func visitI32Store8(memarg: MemArg) -> Instruction { return .i32Store8(memarg: memarg) }
    func visitI32Store16(memarg: MemArg) -> Instruction { return .i32Store16(memarg: memarg) }
    func visitI64Store8(memarg: MemArg) -> Instruction { return .i64Store8(memarg: memarg) }
    func visitI64Store16(memarg: MemArg) -> Instruction { return .i64Store16(memarg: memarg) }
    func visitI64Store32(memarg: MemArg) -> Instruction { return .i64Store32(memarg: memarg) }
    func visitMemorySize(memory: UInt32) -> Instruction { return .memorySize(memory: memory) }
    func visitMemoryGrow(memory: UInt32) -> Instruction { return .memoryGrow(memory: memory) }
    func visitI32Const(value: Int32) -> Instruction { return .i32Const(value: value) }
    func visitI64Const(value: Int64) -> Instruction { return .i64Const(value: value) }
    func visitF32Const(value: IEEE754.Float32) -> Instruction { return .f32Const(value: value) }
    func visitF64Const(value: IEEE754.Float64) -> Instruction { return .f64Const(value: value) }
    func visitRefNull(type: ReferenceType) -> Instruction { return .refNull(type: type) }
    func visitRefIsNull() -> Instruction { return .refIsNull }
    func visitRefFunc(functionIndex: UInt32) -> Instruction { return .refFunc(functionIndex: functionIndex) }
    func visitI32Eqz() -> Instruction { return .i32Eqz }
    func visitI32Eq() -> Instruction { return .i32Eq }
    func visitI32Ne() -> Instruction { return .i32Ne }
    func visitI32LtS() -> Instruction { return .i32LtS }
    func visitI32LtU() -> Instruction { return .i32LtU }
    func visitI32GtS() -> Instruction { return .i32GtS }
    func visitI32GtU() -> Instruction { return .i32GtU }
    func visitI32LeS() -> Instruction { return .i32LeS }
    func visitI32LeU() -> Instruction { return .i32LeU }
    func visitI32GeS() -> Instruction { return .i32GeS }
    func visitI32GeU() -> Instruction { return .i32GeU }
    func visitI64Eqz() -> Instruction { return .i64Eqz }
    func visitI64Eq() -> Instruction { return .i64Eq }
    func visitI64Ne() -> Instruction { return .i64Ne }
    func visitI64LtS() -> Instruction { return .i64LtS }
    func visitI64LtU() -> Instruction { return .i64LtU }
    func visitI64GtS() -> Instruction { return .i64GtS }
    func visitI64GtU() -> Instruction { return .i64GtU }
    func visitI64LeS() -> Instruction { return .i64LeS }
    func visitI64LeU() -> Instruction { return .i64LeU }
    func visitI64GeS() -> Instruction { return .i64GeS }
    func visitI64GeU() -> Instruction { return .i64GeU }
    func visitF32Eq() -> Instruction { return .f32Eq }
    func visitF32Ne() -> Instruction { return .f32Ne }
    func visitF32Lt() -> Instruction { return .f32Lt }
    func visitF32Gt() -> Instruction { return .f32Gt }
    func visitF32Le() -> Instruction { return .f32Le }
    func visitF32Ge() -> Instruction { return .f32Ge }
    func visitF64Eq() -> Instruction { return .f64Eq }
    func visitF64Ne() -> Instruction { return .f64Ne }
    func visitF64Lt() -> Instruction { return .f64Lt }
    func visitF64Gt() -> Instruction { return .f64Gt }
    func visitF64Le() -> Instruction { return .f64Le }
    func visitF64Ge() -> Instruction { return .f64Ge }
    func visitI32Clz() -> Instruction { return .i32Clz }
    func visitI32Ctz() -> Instruction { return .i32Ctz }
    func visitI32Popcnt() -> Instruction { return .i32Popcnt }
    func visitI32Add() -> Instruction { return .i32Add }
    func visitI32Sub() -> Instruction { return .i32Sub }
    func visitI32Mul() -> Instruction { return .i32Mul }
    func visitI32DivS() -> Instruction { return .i32DivS }
    func visitI32DivU() -> Instruction { return .i32DivU }
    func visitI32RemS() -> Instruction { return .i32RemS }
    func visitI32RemU() -> Instruction { return .i32RemU }
    func visitI32And() -> Instruction { return .i32And }
    func visitI32Or() -> Instruction { return .i32Or }
    func visitI32Xor() -> Instruction { return .i32Xor }
    func visitI32Shl() -> Instruction { return .i32Shl }
    func visitI32ShrS() -> Instruction { return .i32ShrS }
    func visitI32ShrU() -> Instruction { return .i32ShrU }
    func visitI32Rotl() -> Instruction { return .i32Rotl }
    func visitI32Rotr() -> Instruction { return .i32Rotr }
    func visitI64Clz() -> Instruction { return .i64Clz }
    func visitI64Ctz() -> Instruction { return .i64Ctz }
    func visitI64Popcnt() -> Instruction { return .i64Popcnt }
    func visitI64Add() -> Instruction { return .i64Add }
    func visitI64Sub() -> Instruction { return .i64Sub }
    func visitI64Mul() -> Instruction { return .i64Mul }
    func visitI64DivS() -> Instruction { return .i64DivS }
    func visitI64DivU() -> Instruction { return .i64DivU }
    func visitI64RemS() -> Instruction { return .i64RemS }
    func visitI64RemU() -> Instruction { return .i64RemU }
    func visitI64And() -> Instruction { return .i64And }
    func visitI64Or() -> Instruction { return .i64Or }
    func visitI64Xor() -> Instruction { return .i64Xor }
    func visitI64Shl() -> Instruction { return .i64Shl }
    func visitI64ShrS() -> Instruction { return .i64ShrS }
    func visitI64ShrU() -> Instruction { return .i64ShrU }
    func visitI64Rotl() -> Instruction { return .i64Rotl }
    func visitI64Rotr() -> Instruction { return .i64Rotr }
    func visitF32Abs() -> Instruction { return .f32Abs }
    func visitF32Neg() -> Instruction { return .f32Neg }
    func visitF32Ceil() -> Instruction { return .f32Ceil }
    func visitF32Floor() -> Instruction { return .f32Floor }
    func visitF32Trunc() -> Instruction { return .f32Trunc }
    func visitF32Nearest() -> Instruction { return .f32Nearest }
    func visitF32Sqrt() -> Instruction { return .f32Sqrt }
    func visitF32Add() -> Instruction { return .f32Add }
    func visitF32Sub() -> Instruction { return .f32Sub }
    func visitF32Mul() -> Instruction { return .f32Mul }
    func visitF32Div() -> Instruction { return .f32Div }
    func visitF32Min() -> Instruction { return .f32Min }
    func visitF32Max() -> Instruction { return .f32Max }
    func visitF32Copysign() -> Instruction { return .f32Copysign }
    func visitF64Abs() -> Instruction { return .f64Abs }
    func visitF64Neg() -> Instruction { return .f64Neg }
    func visitF64Ceil() -> Instruction { return .f64Ceil }
    func visitF64Floor() -> Instruction { return .f64Floor }
    func visitF64Trunc() -> Instruction { return .f64Trunc }
    func visitF64Nearest() -> Instruction { return .f64Nearest }
    func visitF64Sqrt() -> Instruction { return .f64Sqrt }
    func visitF64Add() -> Instruction { return .f64Add }
    func visitF64Sub() -> Instruction { return .f64Sub }
    func visitF64Mul() -> Instruction { return .f64Mul }
    func visitF64Div() -> Instruction { return .f64Div }
    func visitF64Min() -> Instruction { return .f64Min }
    func visitF64Max() -> Instruction { return .f64Max }
    func visitF64Copysign() -> Instruction { return .f64Copysign }
    func visitI32WrapI64() -> Instruction { return .i32WrapI64 }
    func visitI32TruncF32S() -> Instruction { return .i32TruncF32S }
    func visitI32TruncF32U() -> Instruction { return .i32TruncF32U }
    func visitI32TruncF64S() -> Instruction { return .i32TruncF64S }
    func visitI32TruncF64U() -> Instruction { return .i32TruncF64U }
    func visitI64ExtendI32S() -> Instruction { return .i64ExtendI32S }
    func visitI64ExtendI32U() -> Instruction { return .i64ExtendI32U }
    func visitI64TruncF32S() -> Instruction { return .i64TruncF32S }
    func visitI64TruncF32U() -> Instruction { return .i64TruncF32U }
    func visitI64TruncF64S() -> Instruction { return .i64TruncF64S }
    func visitI64TruncF64U() -> Instruction { return .i64TruncF64U }
    func visitF32ConvertI32S() -> Instruction { return .f32ConvertI32S }
    func visitF32ConvertI32U() -> Instruction { return .f32ConvertI32U }
    func visitF32ConvertI64S() -> Instruction { return .f32ConvertI64S }
    func visitF32ConvertI64U() -> Instruction { return .f32ConvertI64U }
    func visitF32DemoteF64() -> Instruction { return .f32DemoteF64 }
    func visitF64ConvertI32S() -> Instruction { return .f64ConvertI32S }
    func visitF64ConvertI32U() -> Instruction { return .f64ConvertI32U }
    func visitF64ConvertI64S() -> Instruction { return .f64ConvertI64S }
    func visitF64ConvertI64U() -> Instruction { return .f64ConvertI64U }
    func visitF64PromoteF32() -> Instruction { return .f64PromoteF32 }
    func visitI32ReinterpretF32() -> Instruction { return .i32ReinterpretF32 }
    func visitI64ReinterpretF64() -> Instruction { return .i64ReinterpretF64 }
    func visitF32ReinterpretI32() -> Instruction { return .f32ReinterpretI32 }
    func visitF64ReinterpretI64() -> Instruction { return .f64ReinterpretI64 }
    func visitI32Extend8S() -> Instruction { return .i32Extend8S }
    func visitI32Extend16S() -> Instruction { return .i32Extend16S }
    func visitI64Extend8S() -> Instruction { return .i64Extend8S }
    func visitI64Extend16S() -> Instruction { return .i64Extend16S }
    func visitI64Extend32S() -> Instruction { return .i64Extend32S }
    func visitMemoryInit(dataIndex: UInt32) -> Instruction { return .memoryInit(dataIndex: dataIndex) }
    func visitDataDrop(dataIndex: UInt32) -> Instruction { return .dataDrop(dataIndex: dataIndex) }
    func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) -> Instruction { return .memoryCopy(dstMem: dstMem, srcMem: srcMem) }
    func visitMemoryFill(memory: UInt32) -> Instruction { return .memoryFill(memory: memory) }
    func visitTableInit(elemIndex: UInt32, table: UInt32) -> Instruction { return .tableInit(elemIndex: elemIndex, table: table) }
    func visitElemDrop(elemIndex: UInt32) -> Instruction { return .elemDrop(elemIndex: elemIndex) }
    func visitTableCopy(dstTable: UInt32, srcTable: UInt32) -> Instruction { return .tableCopy(dstTable: dstTable, srcTable: srcTable) }
    func visitTableFill(table: UInt32) -> Instruction { return .tableFill(table: table) }
    func visitTableGet(table: UInt32) -> Instruction { return .tableGet(table: table) }
    func visitTableSet(table: UInt32) -> Instruction { return .tableSet(table: table) }
    func visitTableGrow(table: UInt32) -> Instruction { return .tableGrow(table: table) }
    func visitTableSize(table: UInt32) -> Instruction { return .tableSize(table: table) }
    func visitI32TruncSatF32S() -> Instruction { return .i32TruncSatF32S }
    func visitI32TruncSatF32U() -> Instruction { return .i32TruncSatF32U }
    func visitI32TruncSatF64S() -> Instruction { return .i32TruncSatF64S }
    func visitI32TruncSatF64U() -> Instruction { return .i32TruncSatF64U }
    func visitI64TruncSatF32S() -> Instruction { return .i64TruncSatF32S }
    func visitI64TruncSatF32U() -> Instruction { return .i64TruncSatF32U }
    func visitI64TruncSatF64S() -> Instruction { return .i64TruncSatF64S }
    func visitI64TruncSatF64U() -> Instruction { return .i64TruncSatF64U }
}

public struct InstructionTracingVisitor<V: InstructionVisitor>: InstructionVisitor {
    public let trace: (Instruction) -> Void
    public var visitor: V

    public init(trace: @escaping (Instruction) -> Void, visitor: V) {
        self.trace = trace
        self.visitor = visitor
    }
    public mutating func visitUnreachable() throws -> V.Output {
       trace(.unreachable)
       return try visitor.visitUnreachable()
    }
    public mutating func visitNop() throws -> V.Output {
       trace(.nop)
       return try visitor.visitNop()
    }
    public mutating func visitBlock(blockType: BlockType) throws -> V.Output {
       trace(.block(blockType: blockType))
       return try visitor.visitBlock(blockType: blockType)
    }
    public mutating func visitLoop(blockType: BlockType) throws -> V.Output {
       trace(.loop(blockType: blockType))
       return try visitor.visitLoop(blockType: blockType)
    }
    public mutating func visitIf(blockType: BlockType) throws -> V.Output {
       trace(.if(blockType: blockType))
       return try visitor.visitIf(blockType: blockType)
    }
    public mutating func visitElse() throws -> V.Output {
       trace(.else)
       return try visitor.visitElse()
    }
    public mutating func visitEnd() throws -> V.Output {
       trace(.end)
       return try visitor.visitEnd()
    }
    public mutating func visitBr(relativeDepth: UInt32) throws -> V.Output {
       trace(.br(relativeDepth: relativeDepth))
       return try visitor.visitBr(relativeDepth: relativeDepth)
    }
    public mutating func visitBrIf(relativeDepth: UInt32) throws -> V.Output {
       trace(.brIf(relativeDepth: relativeDepth))
       return try visitor.visitBrIf(relativeDepth: relativeDepth)
    }
    public mutating func visitBrTable(targets: BrTable) throws -> V.Output {
       trace(.brTable(targets: targets))
       return try visitor.visitBrTable(targets: targets)
    }
    public mutating func visitReturn() throws -> V.Output {
       trace(.return)
       return try visitor.visitReturn()
    }
    public mutating func visitCall(functionIndex: UInt32) throws -> V.Output {
       trace(.call(functionIndex: functionIndex))
       return try visitor.visitCall(functionIndex: functionIndex)
    }
    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws -> V.Output {
       trace(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex))
       return try visitor.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
    }
    public mutating func visitDrop() throws -> V.Output {
       trace(.drop)
       return try visitor.visitDrop()
    }
    public mutating func visitSelect() throws -> V.Output {
       trace(.select)
       return try visitor.visitSelect()
    }
    public mutating func visitTypedSelect(type: ValueType) throws -> V.Output {
       trace(.typedSelect(type: type))
       return try visitor.visitTypedSelect(type: type)
    }
    public mutating func visitLocalGet(localIndex: UInt32) throws -> V.Output {
       trace(.localGet(localIndex: localIndex))
       return try visitor.visitLocalGet(localIndex: localIndex)
    }
    public mutating func visitLocalSet(localIndex: UInt32) throws -> V.Output {
       trace(.localSet(localIndex: localIndex))
       return try visitor.visitLocalSet(localIndex: localIndex)
    }
    public mutating func visitLocalTee(localIndex: UInt32) throws -> V.Output {
       trace(.localTee(localIndex: localIndex))
       return try visitor.visitLocalTee(localIndex: localIndex)
    }
    public mutating func visitGlobalGet(globalIndex: UInt32) throws -> V.Output {
       trace(.globalGet(globalIndex: globalIndex))
       return try visitor.visitGlobalGet(globalIndex: globalIndex)
    }
    public mutating func visitGlobalSet(globalIndex: UInt32) throws -> V.Output {
       trace(.globalSet(globalIndex: globalIndex))
       return try visitor.visitGlobalSet(globalIndex: globalIndex)
    }
    public mutating func visitI32Load(memarg: MemArg) throws -> V.Output {
       trace(.i32Load(memarg: memarg))
       return try visitor.visitI32Load(memarg: memarg)
    }
    public mutating func visitI64Load(memarg: MemArg) throws -> V.Output {
       trace(.i64Load(memarg: memarg))
       return try visitor.visitI64Load(memarg: memarg)
    }
    public mutating func visitF32Load(memarg: MemArg) throws -> V.Output {
       trace(.f32Load(memarg: memarg))
       return try visitor.visitF32Load(memarg: memarg)
    }
    public mutating func visitF64Load(memarg: MemArg) throws -> V.Output {
       trace(.f64Load(memarg: memarg))
       return try visitor.visitF64Load(memarg: memarg)
    }
    public mutating func visitI32Load8S(memarg: MemArg) throws -> V.Output {
       trace(.i32Load8S(memarg: memarg))
       return try visitor.visitI32Load8S(memarg: memarg)
    }
    public mutating func visitI32Load8U(memarg: MemArg) throws -> V.Output {
       trace(.i32Load8U(memarg: memarg))
       return try visitor.visitI32Load8U(memarg: memarg)
    }
    public mutating func visitI32Load16S(memarg: MemArg) throws -> V.Output {
       trace(.i32Load16S(memarg: memarg))
       return try visitor.visitI32Load16S(memarg: memarg)
    }
    public mutating func visitI32Load16U(memarg: MemArg) throws -> V.Output {
       trace(.i32Load16U(memarg: memarg))
       return try visitor.visitI32Load16U(memarg: memarg)
    }
    public mutating func visitI64Load8S(memarg: MemArg) throws -> V.Output {
       trace(.i64Load8S(memarg: memarg))
       return try visitor.visitI64Load8S(memarg: memarg)
    }
    public mutating func visitI64Load8U(memarg: MemArg) throws -> V.Output {
       trace(.i64Load8U(memarg: memarg))
       return try visitor.visitI64Load8U(memarg: memarg)
    }
    public mutating func visitI64Load16S(memarg: MemArg) throws -> V.Output {
       trace(.i64Load16S(memarg: memarg))
       return try visitor.visitI64Load16S(memarg: memarg)
    }
    public mutating func visitI64Load16U(memarg: MemArg) throws -> V.Output {
       trace(.i64Load16U(memarg: memarg))
       return try visitor.visitI64Load16U(memarg: memarg)
    }
    public mutating func visitI64Load32S(memarg: MemArg) throws -> V.Output {
       trace(.i64Load32S(memarg: memarg))
       return try visitor.visitI64Load32S(memarg: memarg)
    }
    public mutating func visitI64Load32U(memarg: MemArg) throws -> V.Output {
       trace(.i64Load32U(memarg: memarg))
       return try visitor.visitI64Load32U(memarg: memarg)
    }
    public mutating func visitI32Store(memarg: MemArg) throws -> V.Output {
       trace(.i32Store(memarg: memarg))
       return try visitor.visitI32Store(memarg: memarg)
    }
    public mutating func visitI64Store(memarg: MemArg) throws -> V.Output {
       trace(.i64Store(memarg: memarg))
       return try visitor.visitI64Store(memarg: memarg)
    }
    public mutating func visitF32Store(memarg: MemArg) throws -> V.Output {
       trace(.f32Store(memarg: memarg))
       return try visitor.visitF32Store(memarg: memarg)
    }
    public mutating func visitF64Store(memarg: MemArg) throws -> V.Output {
       trace(.f64Store(memarg: memarg))
       return try visitor.visitF64Store(memarg: memarg)
    }
    public mutating func visitI32Store8(memarg: MemArg) throws -> V.Output {
       trace(.i32Store8(memarg: memarg))
       return try visitor.visitI32Store8(memarg: memarg)
    }
    public mutating func visitI32Store16(memarg: MemArg) throws -> V.Output {
       trace(.i32Store16(memarg: memarg))
       return try visitor.visitI32Store16(memarg: memarg)
    }
    public mutating func visitI64Store8(memarg: MemArg) throws -> V.Output {
       trace(.i64Store8(memarg: memarg))
       return try visitor.visitI64Store8(memarg: memarg)
    }
    public mutating func visitI64Store16(memarg: MemArg) throws -> V.Output {
       trace(.i64Store16(memarg: memarg))
       return try visitor.visitI64Store16(memarg: memarg)
    }
    public mutating func visitI64Store32(memarg: MemArg) throws -> V.Output {
       trace(.i64Store32(memarg: memarg))
       return try visitor.visitI64Store32(memarg: memarg)
    }
    public mutating func visitMemorySize(memory: UInt32) throws -> V.Output {
       trace(.memorySize(memory: memory))
       return try visitor.visitMemorySize(memory: memory)
    }
    public mutating func visitMemoryGrow(memory: UInt32) throws -> V.Output {
       trace(.memoryGrow(memory: memory))
       return try visitor.visitMemoryGrow(memory: memory)
    }
    public mutating func visitI32Const(value: Int32) throws -> V.Output {
       trace(.i32Const(value: value))
       return try visitor.visitI32Const(value: value)
    }
    public mutating func visitI64Const(value: Int64) throws -> V.Output {
       trace(.i64Const(value: value))
       return try visitor.visitI64Const(value: value)
    }
    public mutating func visitF32Const(value: IEEE754.Float32) throws -> V.Output {
       trace(.f32Const(value: value))
       return try visitor.visitF32Const(value: value)
    }
    public mutating func visitF64Const(value: IEEE754.Float64) throws -> V.Output {
       trace(.f64Const(value: value))
       return try visitor.visitF64Const(value: value)
    }
    public mutating func visitRefNull(type: ReferenceType) throws -> V.Output {
       trace(.refNull(type: type))
       return try visitor.visitRefNull(type: type)
    }
    public mutating func visitRefIsNull() throws -> V.Output {
       trace(.refIsNull)
       return try visitor.visitRefIsNull()
    }
    public mutating func visitRefFunc(functionIndex: UInt32) throws -> V.Output {
       trace(.refFunc(functionIndex: functionIndex))
       return try visitor.visitRefFunc(functionIndex: functionIndex)
    }
    public mutating func visitI32Eqz() throws -> V.Output {
       trace(.i32Eqz)
       return try visitor.visitI32Eqz()
    }
    public mutating func visitI32Eq() throws -> V.Output {
       trace(.i32Eq)
       return try visitor.visitI32Eq()
    }
    public mutating func visitI32Ne() throws -> V.Output {
       trace(.i32Ne)
       return try visitor.visitI32Ne()
    }
    public mutating func visitI32LtS() throws -> V.Output {
       trace(.i32LtS)
       return try visitor.visitI32LtS()
    }
    public mutating func visitI32LtU() throws -> V.Output {
       trace(.i32LtU)
       return try visitor.visitI32LtU()
    }
    public mutating func visitI32GtS() throws -> V.Output {
       trace(.i32GtS)
       return try visitor.visitI32GtS()
    }
    public mutating func visitI32GtU() throws -> V.Output {
       trace(.i32GtU)
       return try visitor.visitI32GtU()
    }
    public mutating func visitI32LeS() throws -> V.Output {
       trace(.i32LeS)
       return try visitor.visitI32LeS()
    }
    public mutating func visitI32LeU() throws -> V.Output {
       trace(.i32LeU)
       return try visitor.visitI32LeU()
    }
    public mutating func visitI32GeS() throws -> V.Output {
       trace(.i32GeS)
       return try visitor.visitI32GeS()
    }
    public mutating func visitI32GeU() throws -> V.Output {
       trace(.i32GeU)
       return try visitor.visitI32GeU()
    }
    public mutating func visitI64Eqz() throws -> V.Output {
       trace(.i64Eqz)
       return try visitor.visitI64Eqz()
    }
    public mutating func visitI64Eq() throws -> V.Output {
       trace(.i64Eq)
       return try visitor.visitI64Eq()
    }
    public mutating func visitI64Ne() throws -> V.Output {
       trace(.i64Ne)
       return try visitor.visitI64Ne()
    }
    public mutating func visitI64LtS() throws -> V.Output {
       trace(.i64LtS)
       return try visitor.visitI64LtS()
    }
    public mutating func visitI64LtU() throws -> V.Output {
       trace(.i64LtU)
       return try visitor.visitI64LtU()
    }
    public mutating func visitI64GtS() throws -> V.Output {
       trace(.i64GtS)
       return try visitor.visitI64GtS()
    }
    public mutating func visitI64GtU() throws -> V.Output {
       trace(.i64GtU)
       return try visitor.visitI64GtU()
    }
    public mutating func visitI64LeS() throws -> V.Output {
       trace(.i64LeS)
       return try visitor.visitI64LeS()
    }
    public mutating func visitI64LeU() throws -> V.Output {
       trace(.i64LeU)
       return try visitor.visitI64LeU()
    }
    public mutating func visitI64GeS() throws -> V.Output {
       trace(.i64GeS)
       return try visitor.visitI64GeS()
    }
    public mutating func visitI64GeU() throws -> V.Output {
       trace(.i64GeU)
       return try visitor.visitI64GeU()
    }
    public mutating func visitF32Eq() throws -> V.Output {
       trace(.f32Eq)
       return try visitor.visitF32Eq()
    }
    public mutating func visitF32Ne() throws -> V.Output {
       trace(.f32Ne)
       return try visitor.visitF32Ne()
    }
    public mutating func visitF32Lt() throws -> V.Output {
       trace(.f32Lt)
       return try visitor.visitF32Lt()
    }
    public mutating func visitF32Gt() throws -> V.Output {
       trace(.f32Gt)
       return try visitor.visitF32Gt()
    }
    public mutating func visitF32Le() throws -> V.Output {
       trace(.f32Le)
       return try visitor.visitF32Le()
    }
    public mutating func visitF32Ge() throws -> V.Output {
       trace(.f32Ge)
       return try visitor.visitF32Ge()
    }
    public mutating func visitF64Eq() throws -> V.Output {
       trace(.f64Eq)
       return try visitor.visitF64Eq()
    }
    public mutating func visitF64Ne() throws -> V.Output {
       trace(.f64Ne)
       return try visitor.visitF64Ne()
    }
    public mutating func visitF64Lt() throws -> V.Output {
       trace(.f64Lt)
       return try visitor.visitF64Lt()
    }
    public mutating func visitF64Gt() throws -> V.Output {
       trace(.f64Gt)
       return try visitor.visitF64Gt()
    }
    public mutating func visitF64Le() throws -> V.Output {
       trace(.f64Le)
       return try visitor.visitF64Le()
    }
    public mutating func visitF64Ge() throws -> V.Output {
       trace(.f64Ge)
       return try visitor.visitF64Ge()
    }
    public mutating func visitI32Clz() throws -> V.Output {
       trace(.i32Clz)
       return try visitor.visitI32Clz()
    }
    public mutating func visitI32Ctz() throws -> V.Output {
       trace(.i32Ctz)
       return try visitor.visitI32Ctz()
    }
    public mutating func visitI32Popcnt() throws -> V.Output {
       trace(.i32Popcnt)
       return try visitor.visitI32Popcnt()
    }
    public mutating func visitI32Add() throws -> V.Output {
       trace(.i32Add)
       return try visitor.visitI32Add()
    }
    public mutating func visitI32Sub() throws -> V.Output {
       trace(.i32Sub)
       return try visitor.visitI32Sub()
    }
    public mutating func visitI32Mul() throws -> V.Output {
       trace(.i32Mul)
       return try visitor.visitI32Mul()
    }
    public mutating func visitI32DivS() throws -> V.Output {
       trace(.i32DivS)
       return try visitor.visitI32DivS()
    }
    public mutating func visitI32DivU() throws -> V.Output {
       trace(.i32DivU)
       return try visitor.visitI32DivU()
    }
    public mutating func visitI32RemS() throws -> V.Output {
       trace(.i32RemS)
       return try visitor.visitI32RemS()
    }
    public mutating func visitI32RemU() throws -> V.Output {
       trace(.i32RemU)
       return try visitor.visitI32RemU()
    }
    public mutating func visitI32And() throws -> V.Output {
       trace(.i32And)
       return try visitor.visitI32And()
    }
    public mutating func visitI32Or() throws -> V.Output {
       trace(.i32Or)
       return try visitor.visitI32Or()
    }
    public mutating func visitI32Xor() throws -> V.Output {
       trace(.i32Xor)
       return try visitor.visitI32Xor()
    }
    public mutating func visitI32Shl() throws -> V.Output {
       trace(.i32Shl)
       return try visitor.visitI32Shl()
    }
    public mutating func visitI32ShrS() throws -> V.Output {
       trace(.i32ShrS)
       return try visitor.visitI32ShrS()
    }
    public mutating func visitI32ShrU() throws -> V.Output {
       trace(.i32ShrU)
       return try visitor.visitI32ShrU()
    }
    public mutating func visitI32Rotl() throws -> V.Output {
       trace(.i32Rotl)
       return try visitor.visitI32Rotl()
    }
    public mutating func visitI32Rotr() throws -> V.Output {
       trace(.i32Rotr)
       return try visitor.visitI32Rotr()
    }
    public mutating func visitI64Clz() throws -> V.Output {
       trace(.i64Clz)
       return try visitor.visitI64Clz()
    }
    public mutating func visitI64Ctz() throws -> V.Output {
       trace(.i64Ctz)
       return try visitor.visitI64Ctz()
    }
    public mutating func visitI64Popcnt() throws -> V.Output {
       trace(.i64Popcnt)
       return try visitor.visitI64Popcnt()
    }
    public mutating func visitI64Add() throws -> V.Output {
       trace(.i64Add)
       return try visitor.visitI64Add()
    }
    public mutating func visitI64Sub() throws -> V.Output {
       trace(.i64Sub)
       return try visitor.visitI64Sub()
    }
    public mutating func visitI64Mul() throws -> V.Output {
       trace(.i64Mul)
       return try visitor.visitI64Mul()
    }
    public mutating func visitI64DivS() throws -> V.Output {
       trace(.i64DivS)
       return try visitor.visitI64DivS()
    }
    public mutating func visitI64DivU() throws -> V.Output {
       trace(.i64DivU)
       return try visitor.visitI64DivU()
    }
    public mutating func visitI64RemS() throws -> V.Output {
       trace(.i64RemS)
       return try visitor.visitI64RemS()
    }
    public mutating func visitI64RemU() throws -> V.Output {
       trace(.i64RemU)
       return try visitor.visitI64RemU()
    }
    public mutating func visitI64And() throws -> V.Output {
       trace(.i64And)
       return try visitor.visitI64And()
    }
    public mutating func visitI64Or() throws -> V.Output {
       trace(.i64Or)
       return try visitor.visitI64Or()
    }
    public mutating func visitI64Xor() throws -> V.Output {
       trace(.i64Xor)
       return try visitor.visitI64Xor()
    }
    public mutating func visitI64Shl() throws -> V.Output {
       trace(.i64Shl)
       return try visitor.visitI64Shl()
    }
    public mutating func visitI64ShrS() throws -> V.Output {
       trace(.i64ShrS)
       return try visitor.visitI64ShrS()
    }
    public mutating func visitI64ShrU() throws -> V.Output {
       trace(.i64ShrU)
       return try visitor.visitI64ShrU()
    }
    public mutating func visitI64Rotl() throws -> V.Output {
       trace(.i64Rotl)
       return try visitor.visitI64Rotl()
    }
    public mutating func visitI64Rotr() throws -> V.Output {
       trace(.i64Rotr)
       return try visitor.visitI64Rotr()
    }
    public mutating func visitF32Abs() throws -> V.Output {
       trace(.f32Abs)
       return try visitor.visitF32Abs()
    }
    public mutating func visitF32Neg() throws -> V.Output {
       trace(.f32Neg)
       return try visitor.visitF32Neg()
    }
    public mutating func visitF32Ceil() throws -> V.Output {
       trace(.f32Ceil)
       return try visitor.visitF32Ceil()
    }
    public mutating func visitF32Floor() throws -> V.Output {
       trace(.f32Floor)
       return try visitor.visitF32Floor()
    }
    public mutating func visitF32Trunc() throws -> V.Output {
       trace(.f32Trunc)
       return try visitor.visitF32Trunc()
    }
    public mutating func visitF32Nearest() throws -> V.Output {
       trace(.f32Nearest)
       return try visitor.visitF32Nearest()
    }
    public mutating func visitF32Sqrt() throws -> V.Output {
       trace(.f32Sqrt)
       return try visitor.visitF32Sqrt()
    }
    public mutating func visitF32Add() throws -> V.Output {
       trace(.f32Add)
       return try visitor.visitF32Add()
    }
    public mutating func visitF32Sub() throws -> V.Output {
       trace(.f32Sub)
       return try visitor.visitF32Sub()
    }
    public mutating func visitF32Mul() throws -> V.Output {
       trace(.f32Mul)
       return try visitor.visitF32Mul()
    }
    public mutating func visitF32Div() throws -> V.Output {
       trace(.f32Div)
       return try visitor.visitF32Div()
    }
    public mutating func visitF32Min() throws -> V.Output {
       trace(.f32Min)
       return try visitor.visitF32Min()
    }
    public mutating func visitF32Max() throws -> V.Output {
       trace(.f32Max)
       return try visitor.visitF32Max()
    }
    public mutating func visitF32Copysign() throws -> V.Output {
       trace(.f32Copysign)
       return try visitor.visitF32Copysign()
    }
    public mutating func visitF64Abs() throws -> V.Output {
       trace(.f64Abs)
       return try visitor.visitF64Abs()
    }
    public mutating func visitF64Neg() throws -> V.Output {
       trace(.f64Neg)
       return try visitor.visitF64Neg()
    }
    public mutating func visitF64Ceil() throws -> V.Output {
       trace(.f64Ceil)
       return try visitor.visitF64Ceil()
    }
    public mutating func visitF64Floor() throws -> V.Output {
       trace(.f64Floor)
       return try visitor.visitF64Floor()
    }
    public mutating func visitF64Trunc() throws -> V.Output {
       trace(.f64Trunc)
       return try visitor.visitF64Trunc()
    }
    public mutating func visitF64Nearest() throws -> V.Output {
       trace(.f64Nearest)
       return try visitor.visitF64Nearest()
    }
    public mutating func visitF64Sqrt() throws -> V.Output {
       trace(.f64Sqrt)
       return try visitor.visitF64Sqrt()
    }
    public mutating func visitF64Add() throws -> V.Output {
       trace(.f64Add)
       return try visitor.visitF64Add()
    }
    public mutating func visitF64Sub() throws -> V.Output {
       trace(.f64Sub)
       return try visitor.visitF64Sub()
    }
    public mutating func visitF64Mul() throws -> V.Output {
       trace(.f64Mul)
       return try visitor.visitF64Mul()
    }
    public mutating func visitF64Div() throws -> V.Output {
       trace(.f64Div)
       return try visitor.visitF64Div()
    }
    public mutating func visitF64Min() throws -> V.Output {
       trace(.f64Min)
       return try visitor.visitF64Min()
    }
    public mutating func visitF64Max() throws -> V.Output {
       trace(.f64Max)
       return try visitor.visitF64Max()
    }
    public mutating func visitF64Copysign() throws -> V.Output {
       trace(.f64Copysign)
       return try visitor.visitF64Copysign()
    }
    public mutating func visitI32WrapI64() throws -> V.Output {
       trace(.i32WrapI64)
       return try visitor.visitI32WrapI64()
    }
    public mutating func visitI32TruncF32S() throws -> V.Output {
       trace(.i32TruncF32S)
       return try visitor.visitI32TruncF32S()
    }
    public mutating func visitI32TruncF32U() throws -> V.Output {
       trace(.i32TruncF32U)
       return try visitor.visitI32TruncF32U()
    }
    public mutating func visitI32TruncF64S() throws -> V.Output {
       trace(.i32TruncF64S)
       return try visitor.visitI32TruncF64S()
    }
    public mutating func visitI32TruncF64U() throws -> V.Output {
       trace(.i32TruncF64U)
       return try visitor.visitI32TruncF64U()
    }
    public mutating func visitI64ExtendI32S() throws -> V.Output {
       trace(.i64ExtendI32S)
       return try visitor.visitI64ExtendI32S()
    }
    public mutating func visitI64ExtendI32U() throws -> V.Output {
       trace(.i64ExtendI32U)
       return try visitor.visitI64ExtendI32U()
    }
    public mutating func visitI64TruncF32S() throws -> V.Output {
       trace(.i64TruncF32S)
       return try visitor.visitI64TruncF32S()
    }
    public mutating func visitI64TruncF32U() throws -> V.Output {
       trace(.i64TruncF32U)
       return try visitor.visitI64TruncF32U()
    }
    public mutating func visitI64TruncF64S() throws -> V.Output {
       trace(.i64TruncF64S)
       return try visitor.visitI64TruncF64S()
    }
    public mutating func visitI64TruncF64U() throws -> V.Output {
       trace(.i64TruncF64U)
       return try visitor.visitI64TruncF64U()
    }
    public mutating func visitF32ConvertI32S() throws -> V.Output {
       trace(.f32ConvertI32S)
       return try visitor.visitF32ConvertI32S()
    }
    public mutating func visitF32ConvertI32U() throws -> V.Output {
       trace(.f32ConvertI32U)
       return try visitor.visitF32ConvertI32U()
    }
    public mutating func visitF32ConvertI64S() throws -> V.Output {
       trace(.f32ConvertI64S)
       return try visitor.visitF32ConvertI64S()
    }
    public mutating func visitF32ConvertI64U() throws -> V.Output {
       trace(.f32ConvertI64U)
       return try visitor.visitF32ConvertI64U()
    }
    public mutating func visitF32DemoteF64() throws -> V.Output {
       trace(.f32DemoteF64)
       return try visitor.visitF32DemoteF64()
    }
    public mutating func visitF64ConvertI32S() throws -> V.Output {
       trace(.f64ConvertI32S)
       return try visitor.visitF64ConvertI32S()
    }
    public mutating func visitF64ConvertI32U() throws -> V.Output {
       trace(.f64ConvertI32U)
       return try visitor.visitF64ConvertI32U()
    }
    public mutating func visitF64ConvertI64S() throws -> V.Output {
       trace(.f64ConvertI64S)
       return try visitor.visitF64ConvertI64S()
    }
    public mutating func visitF64ConvertI64U() throws -> V.Output {
       trace(.f64ConvertI64U)
       return try visitor.visitF64ConvertI64U()
    }
    public mutating func visitF64PromoteF32() throws -> V.Output {
       trace(.f64PromoteF32)
       return try visitor.visitF64PromoteF32()
    }
    public mutating func visitI32ReinterpretF32() throws -> V.Output {
       trace(.i32ReinterpretF32)
       return try visitor.visitI32ReinterpretF32()
    }
    public mutating func visitI64ReinterpretF64() throws -> V.Output {
       trace(.i64ReinterpretF64)
       return try visitor.visitI64ReinterpretF64()
    }
    public mutating func visitF32ReinterpretI32() throws -> V.Output {
       trace(.f32ReinterpretI32)
       return try visitor.visitF32ReinterpretI32()
    }
    public mutating func visitF64ReinterpretI64() throws -> V.Output {
       trace(.f64ReinterpretI64)
       return try visitor.visitF64ReinterpretI64()
    }
    public mutating func visitI32Extend8S() throws -> V.Output {
       trace(.i32Extend8S)
       return try visitor.visitI32Extend8S()
    }
    public mutating func visitI32Extend16S() throws -> V.Output {
       trace(.i32Extend16S)
       return try visitor.visitI32Extend16S()
    }
    public mutating func visitI64Extend8S() throws -> V.Output {
       trace(.i64Extend8S)
       return try visitor.visitI64Extend8S()
    }
    public mutating func visitI64Extend16S() throws -> V.Output {
       trace(.i64Extend16S)
       return try visitor.visitI64Extend16S()
    }
    public mutating func visitI64Extend32S() throws -> V.Output {
       trace(.i64Extend32S)
       return try visitor.visitI64Extend32S()
    }
    public mutating func visitMemoryInit(dataIndex: UInt32) throws -> V.Output {
       trace(.memoryInit(dataIndex: dataIndex))
       return try visitor.visitMemoryInit(dataIndex: dataIndex)
    }
    public mutating func visitDataDrop(dataIndex: UInt32) throws -> V.Output {
       trace(.dataDrop(dataIndex: dataIndex))
       return try visitor.visitDataDrop(dataIndex: dataIndex)
    }
    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws -> V.Output {
       trace(.memoryCopy(dstMem: dstMem, srcMem: srcMem))
       return try visitor.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
    }
    public mutating func visitMemoryFill(memory: UInt32) throws -> V.Output {
       trace(.memoryFill(memory: memory))
       return try visitor.visitMemoryFill(memory: memory)
    }
    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws -> V.Output {
       trace(.tableInit(elemIndex: elemIndex, table: table))
       return try visitor.visitTableInit(elemIndex: elemIndex, table: table)
    }
    public mutating func visitElemDrop(elemIndex: UInt32) throws -> V.Output {
       trace(.elemDrop(elemIndex: elemIndex))
       return try visitor.visitElemDrop(elemIndex: elemIndex)
    }
    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws -> V.Output {
       trace(.tableCopy(dstTable: dstTable, srcTable: srcTable))
       return try visitor.visitTableCopy(dstTable: dstTable, srcTable: srcTable)
    }
    public mutating func visitTableFill(table: UInt32) throws -> V.Output {
       trace(.tableFill(table: table))
       return try visitor.visitTableFill(table: table)
    }
    public mutating func visitTableGet(table: UInt32) throws -> V.Output {
       trace(.tableGet(table: table))
       return try visitor.visitTableGet(table: table)
    }
    public mutating func visitTableSet(table: UInt32) throws -> V.Output {
       trace(.tableSet(table: table))
       return try visitor.visitTableSet(table: table)
    }
    public mutating func visitTableGrow(table: UInt32) throws -> V.Output {
       trace(.tableGrow(table: table))
       return try visitor.visitTableGrow(table: table)
    }
    public mutating func visitTableSize(table: UInt32) throws -> V.Output {
       trace(.tableSize(table: table))
       return try visitor.visitTableSize(table: table)
    }
    public mutating func visitI32TruncSatF32S() throws -> V.Output {
       trace(.i32TruncSatF32S)
       return try visitor.visitI32TruncSatF32S()
    }
    public mutating func visitI32TruncSatF32U() throws -> V.Output {
       trace(.i32TruncSatF32U)
       return try visitor.visitI32TruncSatF32U()
    }
    public mutating func visitI32TruncSatF64S() throws -> V.Output {
       trace(.i32TruncSatF64S)
       return try visitor.visitI32TruncSatF64S()
    }
    public mutating func visitI32TruncSatF64U() throws -> V.Output {
       trace(.i32TruncSatF64U)
       return try visitor.visitI32TruncSatF64U()
    }
    public mutating func visitI64TruncSatF32S() throws -> V.Output {
       trace(.i64TruncSatF32S)
       return try visitor.visitI64TruncSatF32S()
    }
    public mutating func visitI64TruncSatF32U() throws -> V.Output {
       trace(.i64TruncSatF32U)
       return try visitor.visitI64TruncSatF32U()
    }
    public mutating func visitI64TruncSatF64S() throws -> V.Output {
       trace(.i64TruncSatF64S)
       return try visitor.visitI64TruncSatF64S()
    }
    public mutating func visitI64TruncSatF64U() throws -> V.Output {
       trace(.i64TruncSatF64U)
       return try visitor.visitI64TruncSatF64U()
    }
}

public protocol InstructionVisitor {
    associatedtype Output
    mutating func visitUnreachable() throws -> Output
    mutating func visitNop() throws -> Output
    mutating func visitBlock(blockType: BlockType) throws -> Output
    mutating func visitLoop(blockType: BlockType) throws -> Output
    mutating func visitIf(blockType: BlockType) throws -> Output
    mutating func visitElse() throws -> Output
    mutating func visitEnd() throws -> Output
    mutating func visitBr(relativeDepth: UInt32) throws -> Output
    mutating func visitBrIf(relativeDepth: UInt32) throws -> Output
    mutating func visitBrTable(targets: BrTable) throws -> Output
    mutating func visitReturn() throws -> Output
    mutating func visitCall(functionIndex: UInt32) throws -> Output
    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws -> Output
    mutating func visitDrop() throws -> Output
    mutating func visitSelect() throws -> Output
    mutating func visitTypedSelect(type: ValueType) throws -> Output
    mutating func visitLocalGet(localIndex: UInt32) throws -> Output
    mutating func visitLocalSet(localIndex: UInt32) throws -> Output
    mutating func visitLocalTee(localIndex: UInt32) throws -> Output
    mutating func visitGlobalGet(globalIndex: UInt32) throws -> Output
    mutating func visitGlobalSet(globalIndex: UInt32) throws -> Output
    mutating func visitI32Load(memarg: MemArg) throws -> Output
    mutating func visitI64Load(memarg: MemArg) throws -> Output
    mutating func visitF32Load(memarg: MemArg) throws -> Output
    mutating func visitF64Load(memarg: MemArg) throws -> Output
    mutating func visitI32Load8S(memarg: MemArg) throws -> Output
    mutating func visitI32Load8U(memarg: MemArg) throws -> Output
    mutating func visitI32Load16S(memarg: MemArg) throws -> Output
    mutating func visitI32Load16U(memarg: MemArg) throws -> Output
    mutating func visitI64Load8S(memarg: MemArg) throws -> Output
    mutating func visitI64Load8U(memarg: MemArg) throws -> Output
    mutating func visitI64Load16S(memarg: MemArg) throws -> Output
    mutating func visitI64Load16U(memarg: MemArg) throws -> Output
    mutating func visitI64Load32S(memarg: MemArg) throws -> Output
    mutating func visitI64Load32U(memarg: MemArg) throws -> Output
    mutating func visitI32Store(memarg: MemArg) throws -> Output
    mutating func visitI64Store(memarg: MemArg) throws -> Output
    mutating func visitF32Store(memarg: MemArg) throws -> Output
    mutating func visitF64Store(memarg: MemArg) throws -> Output
    mutating func visitI32Store8(memarg: MemArg) throws -> Output
    mutating func visitI32Store16(memarg: MemArg) throws -> Output
    mutating func visitI64Store8(memarg: MemArg) throws -> Output
    mutating func visitI64Store16(memarg: MemArg) throws -> Output
    mutating func visitI64Store32(memarg: MemArg) throws -> Output
    mutating func visitMemorySize(memory: UInt32) throws -> Output
    mutating func visitMemoryGrow(memory: UInt32) throws -> Output
    mutating func visitI32Const(value: Int32) throws -> Output
    mutating func visitI64Const(value: Int64) throws -> Output
    mutating func visitF32Const(value: IEEE754.Float32) throws -> Output
    mutating func visitF64Const(value: IEEE754.Float64) throws -> Output
    mutating func visitRefNull(type: ReferenceType) throws -> Output
    mutating func visitRefIsNull() throws -> Output
    mutating func visitRefFunc(functionIndex: UInt32) throws -> Output
    mutating func visitI32Eqz() throws -> Output
    mutating func visitI32Eq() throws -> Output
    mutating func visitI32Ne() throws -> Output
    mutating func visitI32LtS() throws -> Output
    mutating func visitI32LtU() throws -> Output
    mutating func visitI32GtS() throws -> Output
    mutating func visitI32GtU() throws -> Output
    mutating func visitI32LeS() throws -> Output
    mutating func visitI32LeU() throws -> Output
    mutating func visitI32GeS() throws -> Output
    mutating func visitI32GeU() throws -> Output
    mutating func visitI64Eqz() throws -> Output
    mutating func visitI64Eq() throws -> Output
    mutating func visitI64Ne() throws -> Output
    mutating func visitI64LtS() throws -> Output
    mutating func visitI64LtU() throws -> Output
    mutating func visitI64GtS() throws -> Output
    mutating func visitI64GtU() throws -> Output
    mutating func visitI64LeS() throws -> Output
    mutating func visitI64LeU() throws -> Output
    mutating func visitI64GeS() throws -> Output
    mutating func visitI64GeU() throws -> Output
    mutating func visitF32Eq() throws -> Output
    mutating func visitF32Ne() throws -> Output
    mutating func visitF32Lt() throws -> Output
    mutating func visitF32Gt() throws -> Output
    mutating func visitF32Le() throws -> Output
    mutating func visitF32Ge() throws -> Output
    mutating func visitF64Eq() throws -> Output
    mutating func visitF64Ne() throws -> Output
    mutating func visitF64Lt() throws -> Output
    mutating func visitF64Gt() throws -> Output
    mutating func visitF64Le() throws -> Output
    mutating func visitF64Ge() throws -> Output
    mutating func visitI32Clz() throws -> Output
    mutating func visitI32Ctz() throws -> Output
    mutating func visitI32Popcnt() throws -> Output
    mutating func visitI32Add() throws -> Output
    mutating func visitI32Sub() throws -> Output
    mutating func visitI32Mul() throws -> Output
    mutating func visitI32DivS() throws -> Output
    mutating func visitI32DivU() throws -> Output
    mutating func visitI32RemS() throws -> Output
    mutating func visitI32RemU() throws -> Output
    mutating func visitI32And() throws -> Output
    mutating func visitI32Or() throws -> Output
    mutating func visitI32Xor() throws -> Output
    mutating func visitI32Shl() throws -> Output
    mutating func visitI32ShrS() throws -> Output
    mutating func visitI32ShrU() throws -> Output
    mutating func visitI32Rotl() throws -> Output
    mutating func visitI32Rotr() throws -> Output
    mutating func visitI64Clz() throws -> Output
    mutating func visitI64Ctz() throws -> Output
    mutating func visitI64Popcnt() throws -> Output
    mutating func visitI64Add() throws -> Output
    mutating func visitI64Sub() throws -> Output
    mutating func visitI64Mul() throws -> Output
    mutating func visitI64DivS() throws -> Output
    mutating func visitI64DivU() throws -> Output
    mutating func visitI64RemS() throws -> Output
    mutating func visitI64RemU() throws -> Output
    mutating func visitI64And() throws -> Output
    mutating func visitI64Or() throws -> Output
    mutating func visitI64Xor() throws -> Output
    mutating func visitI64Shl() throws -> Output
    mutating func visitI64ShrS() throws -> Output
    mutating func visitI64ShrU() throws -> Output
    mutating func visitI64Rotl() throws -> Output
    mutating func visitI64Rotr() throws -> Output
    mutating func visitF32Abs() throws -> Output
    mutating func visitF32Neg() throws -> Output
    mutating func visitF32Ceil() throws -> Output
    mutating func visitF32Floor() throws -> Output
    mutating func visitF32Trunc() throws -> Output
    mutating func visitF32Nearest() throws -> Output
    mutating func visitF32Sqrt() throws -> Output
    mutating func visitF32Add() throws -> Output
    mutating func visitF32Sub() throws -> Output
    mutating func visitF32Mul() throws -> Output
    mutating func visitF32Div() throws -> Output
    mutating func visitF32Min() throws -> Output
    mutating func visitF32Max() throws -> Output
    mutating func visitF32Copysign() throws -> Output
    mutating func visitF64Abs() throws -> Output
    mutating func visitF64Neg() throws -> Output
    mutating func visitF64Ceil() throws -> Output
    mutating func visitF64Floor() throws -> Output
    mutating func visitF64Trunc() throws -> Output
    mutating func visitF64Nearest() throws -> Output
    mutating func visitF64Sqrt() throws -> Output
    mutating func visitF64Add() throws -> Output
    mutating func visitF64Sub() throws -> Output
    mutating func visitF64Mul() throws -> Output
    mutating func visitF64Div() throws -> Output
    mutating func visitF64Min() throws -> Output
    mutating func visitF64Max() throws -> Output
    mutating func visitF64Copysign() throws -> Output
    mutating func visitI32WrapI64() throws -> Output
    mutating func visitI32TruncF32S() throws -> Output
    mutating func visitI32TruncF32U() throws -> Output
    mutating func visitI32TruncF64S() throws -> Output
    mutating func visitI32TruncF64U() throws -> Output
    mutating func visitI64ExtendI32S() throws -> Output
    mutating func visitI64ExtendI32U() throws -> Output
    mutating func visitI64TruncF32S() throws -> Output
    mutating func visitI64TruncF32U() throws -> Output
    mutating func visitI64TruncF64S() throws -> Output
    mutating func visitI64TruncF64U() throws -> Output
    mutating func visitF32ConvertI32S() throws -> Output
    mutating func visitF32ConvertI32U() throws -> Output
    mutating func visitF32ConvertI64S() throws -> Output
    mutating func visitF32ConvertI64U() throws -> Output
    mutating func visitF32DemoteF64() throws -> Output
    mutating func visitF64ConvertI32S() throws -> Output
    mutating func visitF64ConvertI32U() throws -> Output
    mutating func visitF64ConvertI64S() throws -> Output
    mutating func visitF64ConvertI64U() throws -> Output
    mutating func visitF64PromoteF32() throws -> Output
    mutating func visitI32ReinterpretF32() throws -> Output
    mutating func visitI64ReinterpretF64() throws -> Output
    mutating func visitF32ReinterpretI32() throws -> Output
    mutating func visitF64ReinterpretI64() throws -> Output
    mutating func visitI32Extend8S() throws -> Output
    mutating func visitI32Extend16S() throws -> Output
    mutating func visitI64Extend8S() throws -> Output
    mutating func visitI64Extend16S() throws -> Output
    mutating func visitI64Extend32S() throws -> Output
    mutating func visitMemoryInit(dataIndex: UInt32) throws -> Output
    mutating func visitDataDrop(dataIndex: UInt32) throws -> Output
    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws -> Output
    mutating func visitMemoryFill(memory: UInt32) throws -> Output
    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws -> Output
    mutating func visitElemDrop(elemIndex: UInt32) throws -> Output
    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws -> Output
    mutating func visitTableFill(table: UInt32) throws -> Output
    mutating func visitTableGet(table: UInt32) throws -> Output
    mutating func visitTableSet(table: UInt32) throws -> Output
    mutating func visitTableGrow(table: UInt32) throws -> Output
    mutating func visitTableSize(table: UInt32) throws -> Output
    mutating func visitI32TruncSatF32S() throws -> Output
    mutating func visitI32TruncSatF32U() throws -> Output
    mutating func visitI32TruncSatF64S() throws -> Output
    mutating func visitI32TruncSatF64U() throws -> Output
    mutating func visitI64TruncSatF32S() throws -> Output
    mutating func visitI64TruncSatF32U() throws -> Output
    mutating func visitI64TruncSatF64S() throws -> Output
    mutating func visitI64TruncSatF64U() throws -> Output
}
